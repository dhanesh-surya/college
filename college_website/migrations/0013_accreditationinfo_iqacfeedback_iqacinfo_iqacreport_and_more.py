# Generated by Django 5.0.7 on 2025-08-27 16:25

import django_ckeditor_5.fields
import colorfield.fields
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('college_website', '0012_toputilitybar'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccreditationInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Accreditation title', max_length=200)),
                ('accrediting_body', models.CharField(help_text='Name of the accrediting organization', max_length=200)),
                ('accreditation_type', models.CharField(help_text='Type of accreditation', max_length=100)),
                ('status', models.CharField(choices=[('accredited', 'Accredited'), ('reaccredited', 'Re-accredited'), ('in_progress', 'In Progress'), ('applied', 'Applied')], default='accredited', max_length=50)),
                ('grade_or_rating', models.CharField(blank=True, help_text='Grade, rating or score received', max_length=20)),
                ('accreditation_date', models.DateField(help_text='Date of accreditation')),
                ('validity_period', models.CharField(help_text='Validity period of accreditation', max_length=100)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(help_text='Detailed description of the accreditation')),
                ('certificate_file', models.FileField(blank=True, help_text='Accreditation certificate file', upload_to='iqac/accreditation/')),
                ('website_url', models.URLField(blank=True, help_text='Official website of accrediting body')),
                ('is_featured', models.BooleanField(default=False, help_text='Feature on main accreditation page')),
                ('is_active', models.BooleanField(default=True, help_text='Display this accreditation')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Display order (lower numbers appear first)')),
            ],
            options={
                'verbose_name': 'Accreditation Information',
                'verbose_name_plural': 'Accreditation Information',
                'ordering': ['display_order', '-accreditation_date'],
            },
        ),
        migrations.CreateModel(
            name='IQACFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of feedback provider', max_length=100)),
                ('email', models.EmailField(help_text='Email address', max_length=254)),
                ('phone', models.CharField(blank=True, help_text='Phone number (optional)', max_length=20)),
                ('feedback_type', models.CharField(choices=[('student', 'Student Feedback'), ('faculty', 'Faculty Feedback'), ('parent', 'Parent Feedback'), ('alumni', 'Alumni Feedback'), ('employer', 'Employer Feedback'), ('other', 'Other Stakeholder')], help_text='Type of stakeholder providing feedback', max_length=20)),
                ('teaching_quality', models.PositiveSmallIntegerField(choices=[(5, 'Excellent'), (4, 'Very Good'), (3, 'Good'), (2, 'Fair'), (1, 'Poor')], help_text='Rate teaching quality')),
                ('infrastructure', models.PositiveSmallIntegerField(choices=[(5, 'Excellent'), (4, 'Very Good'), (3, 'Good'), (2, 'Fair'), (1, 'Poor')], help_text='Rate infrastructure facilities')),
                ('administration', models.PositiveSmallIntegerField(choices=[(5, 'Excellent'), (4, 'Very Good'), (3, 'Good'), (2, 'Fair'), (1, 'Poor')], help_text='Rate administrative services')),
                ('library_resources', models.PositiveSmallIntegerField(choices=[(5, 'Excellent'), (4, 'Very Good'), (3, 'Good'), (2, 'Fair'), (1, 'Poor')], help_text='Rate library resources')),
                ('overall_satisfaction', models.PositiveSmallIntegerField(choices=[(5, 'Excellent'), (4, 'Very Good'), (3, 'Good'), (2, 'Fair'), (1, 'Poor')], help_text='Overall satisfaction rating')),
                ('suggestions', models.TextField(help_text='Suggestions for improvement')),
                ('strengths', models.TextField(blank=True, help_text='Institutional strengths (optional)')),
                ('areas_for_improvement', models.TextField(blank=True, help_text='Areas that need improvement (optional)')),
                ('is_reviewed', models.BooleanField(default=False, help_text='Mark as reviewed by IQAC team')),
                ('reviewed_by', models.CharField(blank=True, help_text='Name of reviewer', max_length=100)),
                ('review_date', models.DateTimeField(blank=True, help_text='Date of review', null=True)),
                ('response', models.TextField(blank=True, help_text='IQAC response to feedback')),
            ],
            options={
                'verbose_name': 'IQAC Feedback',
                'verbose_name_plural': 'IQAC Feedback',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='IQACInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(default='Internal Quality Assurance Cell', help_text='IQAC page title', max_length=200)),
                ('subtitle', models.CharField(blank=True, help_text='Subtitle or tagline for IQAC', max_length=300)),
                ('overview', django_ckeditor_5.fields.CKEditor5Field(help_text='Detailed overview of IQAC objectives and functions')),
                ('vision', models.TextField(blank=True, help_text='IQAC vision statement')),
                ('mission', models.TextField(blank=True, help_text='IQAC mission statement')),
                ('objectives', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Key objectives of IQAC')),
                ('years_of_excellence', models.PositiveIntegerField(default=10, help_text='Years of excellence in quality assurance')),
                ('quality_initiatives', models.PositiveIntegerField(default=50, help_text='Number of quality initiatives implemented')),
                ('naac_grade', models.CharField(default='A++', help_text='NAAC accreditation grade', max_length=10)),
                ('quality_compliance', models.CharField(default='100%', help_text='Quality compliance percentage', max_length=10)),
                ('coordinator_name', models.CharField(blank=True, help_text='Name of IQAC coordinator', max_length=100)),
                ('coordinator_designation', models.CharField(blank=True, help_text='Designation of IQAC coordinator', max_length=100)),
                ('office_location', models.CharField(blank=True, help_text='Physical location of IQAC office', max_length=200)),
                ('phone', models.CharField(blank=True, help_text='IQAC contact phone number', max_length=20)),
                ('email', models.EmailField(blank=True, help_text='IQAC official email address', max_length=254)),
                ('show_statistics', models.BooleanField(default=True, help_text='Display statistics section')),
                ('show_contact_info', models.BooleanField(default=True, help_text='Display contact information')),
                ('is_active', models.BooleanField(default=True, help_text='Enable/disable IQAC section')),
                ('meta_description', models.CharField(blank=True, help_text='SEO meta description for IQAC page', max_length=160)),
            ],
            options={
                'verbose_name': 'IQAC Information',
                'verbose_name_plural': 'IQAC Information',
            },
        ),
        migrations.CreateModel(
            name='IQACReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Report title', max_length=200)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('report_type', models.CharField(choices=[('annual', 'Annual Report'), ('self_study', 'Self Study Report'), ('aqar', 'Annual Quality Assurance Report (AQAR)'), ('ssr', 'Self Study Report (SSR)'), ('naac', 'NAAC Related'), ('nirf', 'NIRF Related'), ('other', 'Other Report')], default='annual', max_length=20)),
                ('academic_year', models.CharField(help_text='Academic year (e.g., 2023-24)', max_length=9)),
                ('description', models.TextField(blank=True, help_text='Brief description of the report')),
                ('report_file', models.FileField(help_text='Upload PDF report file', upload_to='iqac/reports/')),
                ('cover_image', models.ImageField(blank=True, help_text='Optional cover image for the report', upload_to='iqac/covers/')),
                ('file_size', models.CharField(blank=True, help_text='File size (auto-calculated)', max_length=20)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('publish_date', models.DateField(default=django.utils.timezone.now, help_text='Report publication date')),
                ('is_featured', models.BooleanField(default=False, help_text='Feature this report on main IQAC page')),
                ('is_published', models.BooleanField(default=True, help_text='Make report publicly available')),
            ],
            options={
                'verbose_name': 'IQAC Report',
                'verbose_name_plural': 'IQAC Reports',
                'ordering': ['-publish_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NAACInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(default='NAAC Accreditation', help_text='NAAC section title', max_length=200)),
                ('current_grade', models.CharField(default='A++', help_text='Current NAAC grade', max_length=5)),
                ('accreditation_year', models.PositiveIntegerField(help_text='Year of last accreditation')),
                ('validity_period', models.CharField(help_text='Validity period of accreditation', max_length=50)),
                ('cgpa_score', models.DecimalField(blank=True, decimal_places=2, help_text='CGPA score obtained', max_digits=3, null=True)),
                ('overview', django_ckeditor_5.fields.CKEditor5Field(help_text='Overview of NAAC accreditation process and achievements')),
                ('key_highlights', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Key highlights from NAAC assessment')),
                ('certificate_file', models.FileField(blank=True, help_text='NAAC accreditation certificate', upload_to='iqac/naac/')),
                ('peer_team_report', models.FileField(blank=True, help_text='Peer team report', upload_to='iqac/naac/')),
                ('is_active', models.BooleanField(default=True, help_text='Enable/disable NAAC section')),
            ],
            options={
                'verbose_name': 'NAAC Information',
                'verbose_name_plural': 'NAAC Information',
            },
        ),
        migrations.CreateModel(
            name='NIRFInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(default='NIRF Rankings', help_text='NIRF section title', max_length=200)),
                ('current_ranking', models.PositiveIntegerField(blank=True, help_text='Current NIRF ranking position', null=True)),
                ('ranking_year', models.PositiveIntegerField(help_text='Year of ranking')),
                ('category', models.CharField(default='College', help_text='NIRF ranking category', max_length=100)),
                ('overall_score', models.DecimalField(blank=True, decimal_places=2, help_text='Overall NIRF score', max_digits=5, null=True)),
                ('overview', django_ckeditor_5.fields.CKEditor5Field(help_text='Overview of NIRF participation and achievements')),
                ('performance_metrics', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed performance metrics and scores')),
                ('data_template', models.FileField(blank=True, help_text='NIRF data template submitted', upload_to='iqac/nirf/')),
                ('is_active', models.BooleanField(default=True, help_text='Enable/disable NIRF section')),
            ],
            options={
                'verbose_name': 'NIRF Information',
                'verbose_name_plural': 'NIRF Information',
                'ordering': ['-ranking_year'],
            },
        ),
        migrations.CreateModel(
            name='QualityInitiative',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Initiative title', max_length=200)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(help_text='Detailed description of the initiative')),
                ('objectives', models.TextField(help_text='Key objectives of this initiative')),
                ('target_beneficiaries', models.CharField(help_text='Who will benefit from this initiative', max_length=200)),
                ('start_date', models.DateField(help_text='Initiative start date')),
                ('end_date', models.DateField(blank=True, help_text='Initiative end date (if applicable)', null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('on_hold', 'On Hold')], default='planned', max_length=20)),
                ('progress_percentage', models.PositiveIntegerField(default=0, help_text='Progress percentage (0-100)')),
                ('budget_allocated', models.DecimalField(blank=True, decimal_places=2, help_text='Budget allocated for this initiative', max_digits=10, null=True)),
                ('coordinator', models.CharField(help_text='Initiative coordinator name', max_length=100)),
                ('team_members', models.TextField(blank=True, help_text='Team members involved')),
                ('outcome_report', models.FileField(blank=True, help_text='Outcome or progress report', upload_to='iqac/initiatives/')),
                ('is_featured', models.BooleanField(default=False, help_text='Feature on main IQAC page')),
                ('is_published', models.BooleanField(default=True, help_text='Make initiative publicly visible')),
            ],
            options={
                'verbose_name': 'Quality Initiative',
                'verbose_name_plural': 'Quality Initiatives',
                'ordering': ['-start_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='SideMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name for this side menu configuration', max_length=100)),
                ('slug', models.SlugField(blank=True, help_text='Unique identifier for this side menu', unique=True)),
                ('description', models.TextField(blank=True, help_text="Description of this side menu's purpose")),
                ('menu_title', models.CharField(blank=True, help_text='Title to display above the menu (optional)', max_length=200)),
                ('show_title', models.BooleanField(default=True, help_text='Display the menu title')),
                ('title_color', colorfield.fields.ColorField(default='#1f2937', help_text='Menu title color', image_field=None, max_length=25, samples=None)),
                ('background_color', colorfield.fields.ColorField(default='#f8fafc', help_text='Menu background color', image_field=None, max_length=25, samples=None)),
                ('border_color', colorfield.fields.ColorField(default='#e2e8f0', help_text='Menu border color', image_field=None, max_length=25, samples=None)),
                ('is_collapsible', models.BooleanField(default=True, help_text='Allow menu to be collapsed on mobile')),
                ('default_collapsed', models.BooleanField(default=False, help_text='Start collapsed on mobile')),
                ('assignment_type', models.CharField(choices=[('url_pattern', 'URL Pattern'), ('page_slug', 'Specific CMS Page'), ('section', 'Site Section'), ('global', 'Global (All Pages)')], default='url_pattern', max_length=20)),
                ('url_pattern', models.CharField(blank=True, help_text="URL pattern to match (e.g., '/iqac/', '/academics/')", max_length=200)),
                ('page_slug', models.CharField(blank=True, help_text='Specific page slug to attach this menu to', max_length=200)),
                ('section_name', models.CharField(blank=True, help_text="Site section name (e.g., 'academics', 'admissions')", max_length=100)),
                ('priority', models.PositiveIntegerField(default=0, help_text='Priority when multiple menus match (higher = higher priority)')),
                ('is_active', models.BooleanField(default=True, help_text='Enable/disable this side menu')),
            ],
            options={
                'verbose_name': 'Side Menu',
                'verbose_name_plural': 'Side Menus',
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.AddField(
            model_name='toputilitybar',
            name='enable_facebook',
            field=models.BooleanField(default=False, help_text='Enable Facebook link'),
        ),
        migrations.AddField(
            model_name='toputilitybar',
            name='enable_instagram',
            field=models.BooleanField(default=False, help_text='Enable Instagram link'),
        ),
        migrations.AddField(
            model_name='toputilitybar',
            name='enable_linkedin',
            field=models.BooleanField(default=False, help_text='Enable LinkedIn link'),
        ),
        migrations.AddField(
            model_name='toputilitybar',
            name='enable_twitter',
            field=models.BooleanField(default=False, help_text='Enable Twitter link'),
        ),
        migrations.AddField(
            model_name='toputilitybar',
            name='enable_youtube',
            field=models.BooleanField(default=False, help_text='Enable YouTube link'),
        ),
        migrations.AlterField(
            model_name='headerinfo',
            name='address_color',
            field=colorfield.fields.ColorField(default='#6b7280', help_text='Hex color code for address', image_field=None, max_length=7, samples=None),
        ),
        migrations.AlterField(
            model_name='headerinfo',
            name='affiliations_color',
            field=colorfield.fields.ColorField(default='#059669', help_text='Hex color code for affiliations', image_field=None, max_length=7, samples=None),
        ),
        migrations.AlterField(
            model_name='headerinfo',
            name='college_name_color',
            field=colorfield.fields.ColorField(default='#1f2937', help_text='Hex color code for college name', image_field=None, max_length=7, samples=None),
        ),
        migrations.AlterField(
            model_name='headerinfo',
            name='contact_color',
            field=colorfield.fields.ColorField(default='#374151', help_text='Hex color code for contact info', image_field=None, max_length=7, samples=None),
        ),
        migrations.AlterField(
            model_name='headerinfo',
            name='header_background_color',
            field=colorfield.fields.ColorField(default='#ffffff', help_text='Header background color (hex code)', image_field=None, max_length=7, samples=None),
        ),
        migrations.AlterField(
            model_name='headerinfo',
            name='header_border_color',
            field=colorfield.fields.ColorField(default='#e5e7eb', help_text='Border color (hex code)', image_field=None, max_length=7, samples=None),
        ),
        migrations.AlterField(
            model_name='navbarinfo',
            name='navbar_background_color',
            field=colorfield.fields.ColorField(default='#ffffff', help_text='Hex color code', image_field=None, max_length=25, samples=None),
        ),
        migrations.AlterField(
            model_name='navbarinfo',
            name='navbar_border_color',
            field=colorfield.fields.ColorField(default='#e5e7eb', help_text='Hex color code', image_field=None, max_length=25, samples=None),
        ),
        migrations.AlterField(
            model_name='navbarinfo',
            name='navbar_hover_color',
            field=colorfield.fields.ColorField(default='#dc2626', help_text='Hex color code', image_field=None, max_length=25, samples=None),
        ),
        migrations.AlterField(
            model_name='navbarinfo',
            name='navbar_text_color',
            field=colorfield.fields.ColorField(default='#374151', help_text='Hex color code', image_field=None, max_length=25, samples=None),
        ),
        migrations.AlterField(
            model_name='toputilitybar',
            name='background_color',
            field=colorfield.fields.ColorField(default='#0d6efd', help_text='Background color (hex code)', image_field=None, max_length=25, samples=None),
        ),
        migrations.AlterField(
            model_name='toputilitybar',
            name='show_custom_links',
            field=models.BooleanField(default=True, help_text='Display custom links section'),
        ),
        migrations.AlterField(
            model_name='toputilitybar',
            name='show_social_icons',
            field=models.BooleanField(default=True, help_text='Display social media icons section'),
        ),
        migrations.AlterField(
            model_name='toputilitybar',
            name='text_color',
            field=colorfield.fields.ColorField(default='#ffffff', help_text='Text color (hex code)', image_field=None, max_length=25, samples=None),
        ),
        migrations.CreateModel(
            name='CustomLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('text', models.CharField(help_text='Link text to display', max_length=50)),
                ('url', models.CharField(help_text='URL or path for the link', max_length=200)),
                ('icon_class', models.CharField(blank=True, help_text="Optional FontAwesome icon class (e.g., 'fas fa-graduation-cap')", max_length=50)),
                ('tooltip', models.CharField(blank=True, help_text='Optional tooltip text on hover', max_length=100)),
                ('open_in_new_tab', models.BooleanField(default=False, help_text='Open link in new tab/window')),
                ('ordering', models.PositiveIntegerField(default=0, help_text='Display order (lower numbers appear first)')),
                ('is_active', models.BooleanField(default=True, help_text='Enable/disable this link')),
                ('utility_bar', models.ForeignKey(help_text='The utility bar this link belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='custom_links', to='college_website.toputilitybar')),
            ],
            options={
                'verbose_name': 'Custom Link',
                'verbose_name_plural': 'Custom Links',
                'ordering': ['ordering', 'text'],
            },
        ),
        migrations.CreateModel(
            name='SideMenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Display text for the menu item', max_length=200)),
                ('item_type', models.CharField(choices=[('link', 'Simple Link'), ('heading', 'Section Heading'), ('separator', 'Separator Line'), ('dropdown', 'Dropdown Container')], default='link', max_length=20)),
                ('link_type', models.CharField(blank=True, choices=[('internal', 'Internal Page'), ('external', 'External URL'), ('named_url', 'Named URL Pattern'), ('anchor', 'Page Anchor')], default='internal', max_length=20)),
                ('external_url', models.URLField(blank=True, help_text='For external links')),
                ('named_url', models.CharField(blank=True, help_text="Django URL name (e.g., 'college_website:iqac')", max_length=100)),
                ('anchor_id', models.CharField(blank=True, help_text="Page anchor/section ID (e.g., 'overview')", max_length=100)),
                ('icon_class', models.CharField(blank=True, help_text="CSS icon class (e.g., 'fas fa-file-alt')", max_length=50)),
                ('badge_text', models.CharField(blank=True, help_text="Optional badge text (e.g., 'New', '5')", max_length=20)),
                ('badge_color', colorfield.fields.ColorField(blank=True, default='#dc2626', help_text='Badge color', image_field=None, max_length=25, samples=None)),
                ('description', models.CharField(blank=True, help_text='Optional description/tooltip', max_length=300)),
                ('custom_css_class', models.CharField(blank=True, help_text='Custom CSS classes', max_length=100)),
                ('text_color', colorfield.fields.ColorField(blank=True, default='#374151', help_text='Text color for this item', image_field=None, max_length=25, samples=None)),
                ('hover_color', colorfield.fields.ColorField(blank=True, default='#1e40af', help_text='Hover color', image_field=None, max_length=25, samples=None)),
                ('open_in_new_tab', models.BooleanField(default=False, help_text='Open link in new tab')),
                ('highlight_current', models.BooleanField(default=True, help_text='Highlight when current page matches this item')),
                ('ordering', models.PositiveIntegerField(default=0, help_text='Display order (lower numbers appear first)')),
                ('is_active', models.BooleanField(default=True, help_text='Enable/disable this menu item')),
                ('show_only_authenticated', models.BooleanField(default=False, help_text='Show only to logged-in users')),
                ('show_only_staff', models.BooleanField(default=False, help_text='Show only to staff users')),
                ('cms_page', models.ForeignKey(blank=True, help_text='For CMS pages', null=True, on_delete=django.db.models.deletion.CASCADE, to='college_website.page')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent item for nested menus', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='college_website.sidemenuitem')),
                ('side_menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='college_website.sidemenu')),
            ],
            options={
                'verbose_name': 'Side Menu Item',
                'verbose_name_plural': 'Side Menu Items',
                'ordering': ['ordering', 'title'],
            },
        ),
    ]
